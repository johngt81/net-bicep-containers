# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'crproductsapidev003'
  imageRepository: 'productsapi'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  latestTag: 'latest'
  
  IMAGE_NAME: crproductsapidev003.azurecr.io/productsapi:latest
  CONTAINERAPPS_APP: app-productsapi-dev-003
  CONTAINERAPPS_ENVIRONMENT: env-productsapi-dev-003
  RESOURCE_GROUP: weather-app-resource-group3

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          $(latestTag)
- stage: Deploy
  displayName: Deploy to Container Apps
  jobs:
    - job: Deploy
      displayName: Deploy
      pool: 
        vmImage: $(vmImageName)
      steps:
      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 'arm_weather_connection3'
          KeyVaultName: 'kv-productsapi3'
          SecretsFilter: '*'
          RunAsPreJob: false
      - task: AzureContainerApps@1
        displayName: Deploy new container version
        inputs:
          connectedServiceNameARM: 'arm_weather_connection3'
          imageToDeploy: '$(IMAGE_NAME)'
          containerAppName: '$(CONTAINERAPPS_APP)'
          resourceGroup: '$(RESOURCE_GROUP)'
          containerAppEnvironment: '$(CONTAINERAPPS_ENVIRONMENT)'
          targetPort: '8080'
          ingress: 'external'
          acrUsername: $(acrUsername)
          acrPassword: $(acrPassword)
            